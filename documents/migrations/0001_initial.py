# Generated by Django 4.1.10 on 2023-09-07 10:25

import common.helpers
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CompensationFund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('name', models.TextField(verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_name_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'документы компенсационного фонда',
                'verbose_name_plural': 'документы компенсационного фонда',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='DecisionMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('date', models.DateField(verbose_name='дата')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_date_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'решение собрания',
                'verbose_name_plural': 'решения собраний',
                'ordering': ('-date', '-id'),
            },
        ),
        migrations.CreateModel(
            name='FederalLaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('name', models.TextField(verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_name_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'федеральный закон',
                'verbose_name_plural': 'федеральные законы',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='FoundingDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('name', models.TextField(verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_name_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'учредительный документ',
                'verbose_name_plural': 'учредительные документы',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Inspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('year', models.IntegerField(choices=[(2023, 2023), (2022, 2022), (2021, 2021), (2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015)], default=2023, verbose_name='год')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_year_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'проверка организаций',
                'verbose_name_plural': 'проверки организаций',
                'ordering': ('-year',),
            },
        ),
        migrations.CreateModel(
            name='LocalRegulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('name', models.TextField(verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_name_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'локальный нормативный акт',
                'verbose_name_plural': 'локальные нормативные акты',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='RegulatoryLegal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('name', models.TextField(verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_name_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'нормативно-правовой документ',
                'verbose_name_plural': 'нормативно-правовые документы',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='TechnicalRegulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('name', models.TextField(verbose_name='название')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_name_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
            ],
            options={
                'verbose_name': 'технический регламент',
                'verbose_name_plural': 'технические регламенты',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Reporting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_visible', models.BooleanField(db_index=True, default=1, verbose_name='показывать?')),
                ('year', models.IntegerField(choices=[(2023, 2023), (2022, 2022), (2021, 2021), (2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015)], default=2023, verbose_name='год')),
                ('file_path', models.FileField(max_length=140, upload_to=common.helpers.get_doc_year_file_path, validators=[django.core.validators.FileExtensionValidator(('doc', 'docx', 'xls', 'xlsx', 'rtf', 'pdf', 'zip', '7z', 'rar'))], verbose_name='путь к файлу')),
                ('file_size', models.CharField(blank=True, max_length=30, verbose_name='размер файла')),
                ('upload_to', models.CharField(choices=[('', '-----'), ('financial-statements', 'Бухгалтерская отчетность'), ('audit-reports', 'Аудиторское заключение'), ('on0001-reports', 'Отчет по форме №ОН0001'), ('on0002-reports', 'Отчет по форме №ОН0002')], max_length=30, verbose_name='тип документа')),
            ],
            options={
                'verbose_name': 'отчетность',
                'verbose_name_plural': 'отчетность',
                'ordering': ('-year',),
                'unique_together': {('year', 'upload_to')},
            },
        ),
        migrations.AddConstraint(
            model_name='inspection',
            constraint=models.UniqueConstraint(fields=('year',), name='unique year'),
        ),
        migrations.AlterUniqueTogether(
            name='decisionmeeting',
            unique_together={('date', 'name')},
        ),
    ]
